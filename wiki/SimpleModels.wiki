#summary This wiki summarizes all results we can get for simple models

= Introduction =

First install chemev using the installation instructions (see the main page).

= Simple models =

== non-gaussian ==

Execute
{{{
cd chemev/calc/halo_nongaussian
python fit.py
}}}

Currently, the simplex method works much better than bfgs. Both for !ExpLogistics and !ReflectLogistics the bfgs is slower.

Change the parameter `iter` at line 88 from 5 to something bigger, like 50 or 100 to get a better fit. The initial values of all parameters are randomized, so you can rerun the fit many times to see how it converges. 

At the end it will print "metallicity vs age" and "sfr vs age" for both the (random) initial state and the converged fit.

I also tried simulated annealing, with no more success. It's slower than simplex. And simplex by itself is terribly slow and gets stuck at a different "fit" every time. But the annealing and bfgs behaves even worse.... Well, ill defined problem.

== brute force ==

By trying random values of all parameters in all iterations, the best fit is:

{{{
iteration: likelihood

1: -530468.700881
3: -533037.766045
14: -536549.618184
22: -540911.195635
81: -541088.061026
241: -544192.5148
447: -546756.018438
}}}

== bfgs ==

The best fit was:
{{{
At iterate   12    f= -5.49110E+05    |proj g|=  7.97344E+01
--grad 17: 3.84748005867
--grad 18: 3.83931493759

At iterate   13    f= -5.49122E+05    |proj g|=  8.76562E+01
--grad 19: 3.90191888809

At iterate   14    f= -5.49128E+05    |proj g|=  9.49688E+01

.....

At iterate   26    f= -5.49200E+05    |proj g|=  1.48344E+02
--grad 36: 3.83281207085

At iterate   27    f= -5.49205E+05    |proj g|=  1.71609E+02
--grad 37: 3.84526515007

At iterate   28    f= -5.49211E+05    |proj g|=  7.54453E+01

}}}

And some other run:

{{{
At iterate    0    f= -5.07055E+05    |proj g|=  2.28011E+03
--grad 2: 2.35150790215

At iterate    1    f= -5.10541E+05    |proj g|=  2.13931E+03
--grad 3: 2.35605692863

At iterate    2    f= -5.18564E+05    |proj g|=  1.01841E+03
--grad 4: 2.35718607903

At iterate    3    f= -5.20395E+05    |proj g|=  2.83711E+02
--grad 5: 2.3593480587

At iterate    4    f= -5.20646E+05    |proj g|=  8.43711E+01
--grad 6: 2.35730409622

At iterate    5    f= -5.20753E+05    |proj g|=  7.45781E+01
--grad 7: 2.35719203949

At iterate    6    f= -5.21008E+05    |proj g|=  3.37305E+01
--grad 8: 2.36501693726

At iterate    7    f= -5.21045E+05    |proj g|=  5.19336E+01
--grad 9: 2.36349081993
--grad 10: 2.36247515678

At iterate    8    f= -5.21290E+05    |proj g|=  1.66797E+00
--grad 11: 2.35374903679
--grad 12: 2.3499019146

At iterate    9    f= -5.21292E+05    |proj g|=  1.57031E+00
--grad 13: 2.35676908493
--grad 14: 2.35893678665
--grad 15: 2.36179590225

At iterate   10    f= -5.21292E+05    |proj g|=  1.42188E+00
--grad 16: 2.3554110527
--grad 17: 2.36035513878

At iterate   11    f= -5.21292E+05    |proj g|=  1.40234E+00
--grad 18: 2.35649108887
--grad 19: 2.35944604874
--grad 20: 2.35718297958

At iterate   12    f= -5.21298E+05    |proj g|=  1.43008E+01
--grad 21: 2.35989499092
--grad 22: 2.36179995537
--grad 23: 2.35342097282

At iterate   13    f= -5.21298E+05    |proj g|=  1.42539E+01
--grad 24: 2.35044407845

At iterate   14    f= -5.21300E+05    |proj g|=  3.90234E+00
--grad 25: 2.35847711563
--grad 26: 2.36498904228

At iterate   15    f= -5.21301E+05    |proj g|=  1.59375E+00
--grad 27: 2.3503921032
--grad 28: 2.36166501045

At iterate   16    f= -5.21301E+05    |proj g|=  1.66797E+00
--grad 29: 2.36504006386
--grad 30: 2.36506795883

At iterate   17    f= -5.21301E+05    |proj g|=  9.10156E-01
--grad 31: 2.35782909393

At iterate   18    f= -5.21301E+05    |proj g|=  5.54688E-01
--grad 32: 2.36371684074
--grad 33: 2.3554289341

At iterate   19    f= -5.21301E+05    |proj g|=  1.22656E+00
--grad 34: 2.36026501656
--grad 35: 2.35623908043

At iterate   20    f= -5.21302E+05    |proj g|=  1.91406E+00
--grad 36: 2.36251091957

At iterate   21    f= -5.21302E+05    |proj g|=  8.12500E-01
}}}